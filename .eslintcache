[{"E:\\test-task\\contacts\\contact-book-front\\src\\index.tsx":"1","E:\\test-task\\contacts\\contact-book-front\\src\\reportWebVitals.ts":"2","E:\\test-task\\contacts\\contact-book-front\\src\\api\\hooks.ts":"3","E:\\test-task\\contacts\\contact-book-front\\src\\api\\useRequest.ts":"4","E:\\test-task\\contacts\\contact-book-front\\src\\components\\CheckBox\\CheckBox.tsx":"5","E:\\test-task\\contacts\\contact-book-front\\src\\components\\Button\\Button.tsx":"6","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\CaretDownIcon.tsx":"7","E:\\test-task\\contacts\\contact-book-front\\src\\components\\Button\\Button.style.tsx":"8","E:\\test-task\\contacts\\contact-book-front\\src\\components\\Input\\Input.tsx":"9","E:\\test-task\\contacts\\contact-book-front\\src\\components\\WrapperStyle.tsx":"10","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\SearchIcon.tsx":"11","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\TrashIcon.tsx":"12","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\PencilIcon.tsx":"13","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Contacts\\Contacts.tsx":"14","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Contacts\\Contacts.style.tsx":"15","E:\\test-task\\contacts\\contact-book-front\\src\\context\\ModalContext.tsx":"16","E:\\test-task\\contacts\\contact-book-front\\src\\context\\create-context.tsx":"17","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\ContactUpdateForm.tsx":"18","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\ContactForm.tsx":"19","E:\\test-task\\contacts\\contact-book-front\\src\\components\\FormFields\\FormFields.tsx":"20","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\PlusIcon.tsx":"21","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\Fields.tsx":"22","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\CloseIcon.tsx":"23","E:\\test-task\\contacts\\contact-book-front\\src\\utils\\add-server-errors.ts":"24","E:\\test-task\\contacts\\contact-book-front\\src\\settings\\constants.ts":"25","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ModalItems\\ModalItems.tsx":"26","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ModalItems\\ModalItems.style.tsx":"27","E:\\test-task\\contacts\\contact-book-front\\src\\routes.tsx":"28","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Layout\\Layout.tsx":"29","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Layout\\Layout.style.tsx":"30","E:\\test-task\\contacts\\contact-book-front\\src\\components\\Pagination\\Pagination.tsx":"31","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\ArrowNext.tsx":"32","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\ArrowPrev.tsx":"33","E:\\test-task\\contacts\\contact-book-front\\src\\utils\\use-previous.tsx":"34","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\ContactForm.style.tsx":"35","E:\\test-task\\contacts\\contact-book-front\\src\\components\\DotsLoader.tsx":"36"},{"size":948,"mtime":1611960289750,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":499162500000,"results":"39","hashOfConfig":"38"},{"size":1797,"mtime":1612029766740,"results":"40","hashOfConfig":"38"},{"size":1711,"mtime":1611668492378,"results":"41","hashOfConfig":"38"},{"size":1152,"mtime":1611738848565,"results":"42","hashOfConfig":"38"},{"size":714,"mtime":1611688425438,"results":"43","hashOfConfig":"38"},{"size":385,"mtime":1595017696000,"results":"44","hashOfConfig":"38"},{"size":1101,"mtime":1611679954186,"results":"45","hashOfConfig":"38"},{"size":841,"mtime":1612032616365,"results":"46","hashOfConfig":"38"},{"size":763,"mtime":1612044019137,"results":"47","hashOfConfig":"38"},{"size":739,"mtime":1595017696000,"results":"48","hashOfConfig":"38"},{"size":569,"mtime":1611747593010,"results":"49","hashOfConfig":"38"},{"size":512,"mtime":1611780772999,"results":"50","hashOfConfig":"38"},{"size":12290,"mtime":1612047368729,"results":"51","hashOfConfig":"38"},{"size":2796,"mtime":1612043582047,"results":"52","hashOfConfig":"38"},{"size":885,"mtime":1611778964709,"results":"53","hashOfConfig":"38"},{"size":1567,"mtime":1611777674056,"results":"54","hashOfConfig":"38"},{"size":5430,"mtime":1612043927489,"results":"55","hashOfConfig":"38"},{"size":5502,"mtime":1612043927448,"results":"56","hashOfConfig":"38"},{"size":1413,"mtime":1611779885553,"results":"57","hashOfConfig":"38"},{"size":528,"mtime":1611781722178,"results":"58","hashOfConfig":"38"},{"size":5595,"mtime":1611951057779,"results":"59","hashOfConfig":"38"},{"size":667,"mtime":1611868013234,"results":"60","hashOfConfig":"38"},{"size":397,"mtime":1611951411737,"results":"61","hashOfConfig":"38"},{"size":191,"mtime":1611959154945,"results":"62","hashOfConfig":"38"},{"size":1103,"mtime":1612042262118,"results":"63","hashOfConfig":"38"},{"size":537,"mtime":1611777674386,"results":"64","hashOfConfig":"38"},{"size":751,"mtime":1612043290644,"results":"65","hashOfConfig":"38"},{"size":402,"mtime":1611960289750,"results":"66","hashOfConfig":"38"},{"size":177,"mtime":1611960882191,"results":"67","hashOfConfig":"38"},{"size":4912,"mtime":1612000902829,"results":"68","hashOfConfig":"38"},{"size":431,"mtime":1595017696000,"results":"69","hashOfConfig":"38"},{"size":437,"mtime":1595017696000,"results":"70","hashOfConfig":"38"},{"size":230,"mtime":1612012668346,"results":"71","hashOfConfig":"38"},{"size":257,"mtime":1612042262247,"results":"72","hashOfConfig":"38"},{"size":655,"mtime":1612043281350,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"93vgw1",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\test-task\\contacts\\contact-book-front\\src\\index.tsx",[],["151","152"],"E:\\test-task\\contacts\\contact-book-front\\src\\reportWebVitals.ts",[],"E:\\test-task\\contacts\\contact-book-front\\src\\api\\hooks.ts",[],"E:\\test-task\\contacts\\contact-book-front\\src\\api\\useRequest.ts",[],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\CheckBox\\CheckBox.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\Button\\Button.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\CaretDownIcon.tsx",[],["153","154"],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\Button\\Button.style.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\Input\\Input.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\WrapperStyle.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\SearchIcon.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\TrashIcon.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\PencilIcon.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Contacts\\Contacts.tsx",["155"],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Contacts\\Contacts.style.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\context\\ModalContext.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\context\\create-context.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\ContactUpdateForm.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\ContactForm.tsx",["156","157"],"import React from \"react\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport {\r\n  Error,\r\n  FormFields,\r\n  FormLabel,\r\n} from \"../../components/FormFields/FormFields\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport { useModalDispatch } from \"../../context/ModalContext\";\r\nimport {\r\n  Form,\r\n  ModalTitleWrapper,\r\n  ModalTitle,\r\n} from \"../ModalItems/ModalItems.style\";\r\n// import { PlusIcon } from \"../../assets/icons/PlusIcon\";\r\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { PhoneFields, EmailFields } from \"./Fields\";\r\nimport { addContact, useContact } from \"../../api/hooks\";\r\nimport _ from \"lodash\";\r\nimport { addServerErrors } from \"../../utils/add-server-errors\";\r\nimport{FormWrapper,ButtonWrapper} from \"./ContactForm.style\";\r\n\r\ndeclare module \"yup\"{\r\n    interface ArraySchema<T>{\r\n        unique(propertyPath:string,message:string):ArraySchema<T>\r\n    }\r\n}\r\n\r\nyup.addMethod(yup.array, \"unique\", function (propertyPath:string, message:string) {\r\n  return this.test(\"unique\", \"\", function (list) {\r\n    const errors: any = [];\r\n\r\n    list?.forEach((item, index) => {\r\n      const propertyValue = _.get(item, propertyPath);\r\n\r\n      if (\r\n        propertyValue &&\r\n        _.filter(list, [propertyPath, propertyValue]).length > 1\r\n      ) {\r\n        errors.push(\r\n          this.createError({\r\n            path: `${this.path}[${index}].${propertyPath}`,\r\n            message,\r\n          })\r\n        );\r\n      }\r\n    });\r\n\r\n    if (!_.isEmpty(errors)) {\r\n      throw new yup.ValidationError(errors);\r\n    }\r\n\r\n    return true;\r\n  });\r\n});\r\n\r\nconst EmailSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .required(\"Email required\")\r\n    .email(\"Incorrect email format\"),\r\n});\r\nconst PhoneSchema = yup.object().shape({\r\n  phone: yup.string().min(7, \"Number length must be 7 or more\"),\r\n});\r\nconst ContactSchema = yup.object().shape({\r\n  name: yup.string().required(\"Name required\"),\r\n  //@ts-ignore\r\n  emails: yup\r\n    .array()\r\n    .of(EmailSchema)\r\n    .unique(\"email\", \"Email may not have duplicates\"),\r\n  //@ts-ignore\r\n  phones: yup\r\n    .array()\r\n    .of(PhoneSchema)\r\n    .unique(\"phone\", \"Phone may not have duplicates\"),\r\n});\r\n\r\n\r\n\r\nconst ContactForm: React.FC<any> = (props) => {\r\n  const [updating, setUpdating] = React.useState(false);\r\n  const { mutate } = useContact();\r\n\r\n  const dispatch = useModalDispatch();\r\n  //   const data = useModalState(\"data\");\r\n  const closeModal = React.useCallback(\r\n    () => dispatch({ type: \"CLOSE_MODAL\" }),\r\n    [dispatch]\r\n  );\r\n\r\n  const { control, handleSubmit, errors, register, setError } = useForm({\r\n    defaultValues: {\r\n      name: \"\",\r\n      emails: [{ email: \"\" }],\r\n      phones: [{ phone: \"\" }],\r\n    },\r\n    resolver: yupResolver(ContactSchema),\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<IContact> = (formData) => {\r\n    setUpdating(true);\r\n    //   if(data&&data.id){\r\n    addContact(formData)\r\n      .then((res) => {\r\n        mutate()\r\n          .then((res) => {\r\n            closeModal();\r\n          })\r\n          .catch((err) => console.log(err));\r\n\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.errors) {\r\n          addServerErrors<{}>(err.response?.data?.errors, setError);\r\n        } else {\r\n          addServerErrors<{}>({ server: [\"Unknown server error\"] }, setError);\r\n          alert(\"Unknown server error\");\r\n          console.log(errors);\r\n        }\r\n        console.log(err.response);\r\n      })\r\n      .finally(() => setUpdating(false));\r\n    //   }\r\n    console.log(\"data\", formData);\r\n  };\r\n\r\n  return (\r\n    <FormWrapper>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <ModalTitleWrapper>\r\n          <ModalTitle>Add Contact</ModalTitle>\r\n        </ModalTitleWrapper>\r\n        <FormFields>\r\n          <FormLabel>Contact Name</FormLabel>\r\n          <Controller\r\n            name=\"name\"\r\n            control={control}\r\n            defaultValue={\"\"}\r\n            render={({ onChange, onBlur, value, ref }) => (\r\n              <Input\r\n                onBlur={onBlur}\r\n                onChange={onChange}\r\n                value={value}\r\n                inputRef={ref}\r\n              />\r\n            )}\r\n          />\r\n          {errors?.name && <Error>{errors.name?.message}</Error>}\r\n        </FormFields>\r\n        <FormFields>\r\n          <FormLabel>Phone Number(s)</FormLabel>\r\n          <PhoneFields register={register} errors={errors} control={control} />\r\n        </FormFields>\r\n        <FormFields>\r\n          <FormLabel>Email(s)</FormLabel>\r\n          <EmailFields register={register} errors={errors} control={control} />\r\n        </FormFields>\r\n        <ButtonWrapper>\r\n          <Button\r\n            type=\"submit\"\r\n            overrides={{\r\n              BaseButton: {\r\n                style: ({ $theme }) => ({\r\n                  backgroundColor: $theme.colors.positive300,\r\n                  \":hover\": {\r\n                    backgroundColor: $theme.colors.positive400,\r\n                  },\r\n                  borderTopLeftRadius: \"3px\",\r\n                  borderTopRightRadius: \"3px\",\r\n                  borderBottomLeftRadius: \"3px\",\r\n                  borderBottomRightRadius: \"3px\",\r\n                }),\r\n              },\r\n            }}\r\n            isLoading={updating}\r\n          >\r\n            Add Contact\r\n          </Button>\r\n        </ButtonWrapper>\r\n      </Form>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","E:\\test-task\\contacts\\contact-book-front\\src\\components\\FormFields\\FormFields.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\PlusIcon.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\Fields.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\CloseIcon.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\utils\\add-server-errors.ts",[],"E:\\test-task\\contacts\\contact-book-front\\src\\settings\\constants.ts",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ModalItems\\ModalItems.tsx",["158","159","160","161","162"],"import React from 'react'\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalButton,\r\n  } from 'baseui/modal';\r\nimport Button from '../../components/Button/Button'\r\nimport { CloseIcon } from '../../assets/icons/CloseIcon';\r\nimport {useModalState,useModalDispatch} from '../../context/ModalContext'\r\n\r\n/** Modal components  */\r\nimport ContactUpdateForm from '../ContactForm/ContactUpdateForm';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\n\r\nconst MODAL_COMPONENTS={\r\n    CONTACT_UPDATE_FORM:ContactUpdateForm,\r\n    CONTACT_FORM:ContactForm\r\n}\r\n\r\n\r\nexport default function ModalItems() {\r\n    const isOpen = useModalState('isOpen');\r\n    const modalComponent = useModalState('modalComponent');\r\n    const data = useModalState('data');\r\n    const dispatch = useModalDispatch();\r\n    const closeModal = React.useCallback(() => dispatch({ type: 'CLOSE_MODAL' }), [\r\n      dispatch,\r\n    ]);\r\n    if (!modalComponent) {\r\n      return null;\r\n    }\r\n    //@ts-ignore\r\n    const SpecificContent = MODAL_COMPONENTS[modalComponent];\r\n  console.log('Is Open :',isOpen)\r\n    return (\r\n      <Modal isOpen={isOpen} onClose={closeModal}\r\n      >\r\n          <ModalBody>\r\n <SpecificContent onClose={closeModal} data={data} />\r\n          </ModalBody>\r\n       \r\n      </Modal>\r\n    );\r\n  }\r\n  ","E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ModalItems\\ModalItems.style.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\routes.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Layout\\Layout.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\Layout\\Layout.style.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\Pagination\\Pagination.tsx",["163"],"import { useStyletron } from \"baseui\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ArrowPrev } from \"../../assets/icons/ArrowPrev\";\r\nimport { ArrowNext } from \"../../assets/icons/ArrowNext\";\r\n\r\n// type HandlePageChange=(page:T,(page:T)=>void)=>void\r\ntype PageChange=(page:number)=>void\r\nconst makePaginationLinks = (\r\n  pages: number,\r\n  active: number,\r\n  relativeLink: string,\r\n  arrowClassName: string,\r\n  linkClassName: string,\r\n  activeLinkClassName: string,\r\n  subContainerClassName: string,\r\n  onPageChange?:PageChange\r\n) => {\r\n  let pageNumbers = [];\r\n  let startIndex: number;\r\n  let endIndex: number;\r\n\r\n\r\n  const handleClick=(page:number)=>{\r\n    if(onPageChange){\r\n      return onPageChange(page);\r\n\r\n    }\r\n  }\r\n\r\n  if (pages <= 5) {\r\n    // less than 5 pages ,then show all\r\n    startIndex = 1;\r\n    endIndex = pages;\r\n  } else {\r\n    // more than 5 total pages,so calculate start and end pages\r\n    if (active <= 3) {\r\n      startIndex = 1;\r\n      endIndex = 5;\r\n    } else if (active + 2 >= pages) {\r\n      startIndex = pages - 4;\r\n      endIndex = pages;\r\n    } else {\r\n      startIndex = active - 2;\r\n      endIndex = active + 2;\r\n    }\r\n  }\r\n\r\n  // add first pagination if startIndex is not 1\r\n\r\n  if (startIndex > 1) {\r\n    pageNumbers.push(\r\n      <li className={subContainerClassName}>\r\n        <Link\r\n          to={`${relativeLink}page=${active - 1}`}\r\n          className={linkClassName}\r\n          key=\"1\"\r\n          onClick={()=>handleClick(active-1)}\r\n        >\r\n          <span className={arrowClassName}>\r\n            <ArrowPrev />\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  for (let i = startIndex; i <= endIndex; i++) {\r\n    pageNumbers.push(\r\n      <li className={subContainerClassName} key={i}>\r\n        {active === i ? (\r\n          <span className={activeLinkClassName}>{i}</span>\r\n        ) : (\r\n          <Link\r\n            to={`${relativeLink}page=${i}`}\r\n            className={linkClassName}\r\n            key={i}\r\n            onClick={()=>handleClick(i)}\r\n          >\r\n            <span>{i}</span>\r\n          </Link>\r\n        )}\r\n      </li>\r\n    );\r\n  }\r\n\r\n  if (endIndex < pages) {\r\n    pageNumbers.push(\r\n      <li className={subContainerClassName}>\r\n        <Link\r\n          to={`${relativeLink}page=${active + 1}`}\r\n          className={linkClassName}\r\n          key={pages}\r\n          onClick={()=>handleClick(active-1)}\r\n        >\r\n          <span className={arrowClassName}>\r\n            <ArrowNext />\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  return pageNumbers;\r\n};\r\n\r\nexport const Pagination: React.FC<{\r\n  relativeLink: string;\r\n  activePage: number;\r\n  totalPages: number;\r\n  onPageChange?:PageChange\r\n}> = ({ totalPages, activePage, relativeLink,onPageChange }) => {\r\n  const [css, theme] = useStyletron();\r\n\r\n  const linkClassName = css({\r\n    display: \"flex\",\r\n    width: \"32px\",\r\n    height: \"32px\",\r\n    textDecoration: \"none\",\r\n    justifyContent: \"center\",\r\n    ...theme.typography.HeadingXSmall,\r\n    color: theme.colors.positive300,\r\n    backgroundColor: theme.colors.backgroundSecondary,\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n    \":hover\": {\r\n      backgroundColor: theme.colors.backgroundTertiary,\r\n    },\r\n  });\r\n\r\n  const arrowClassName = css({\r\n    display: \"flex\",\r\n    width: \"48px\",\r\n    height: \"32px\",\r\n    backgroundColor: theme.colors.backgroundSecondary,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    color: theme.colors.positive300,\r\n    \":hover\": {\r\n      backgroundColor: theme.colors.backgroundTertiary,\r\n    },\r\n  });\r\n\r\n  const activeLinkClassName = css({\r\n    display: \"flex\",\r\n    width: \"32px\",\r\n    height: \"32px\",\r\n    justifyContent: \"center\",\r\n    ...theme.typography.HeadingXSmall,\r\n    color: theme.colors.mono900,\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n    backgroundColor: theme.colors.backgroundTertiary,\r\n  });\r\n\r\n  const subContainerClassName = css({\r\n    marginRight: \"12px\",\r\n    overflow: \"hidden\",\r\n    borderRadius: \"4px\",\r\n    \":last-child\": {\r\n      marginRight: 0,\r\n    },\r\n    alignContent: \"center\",\r\n  });\r\nif(totalPages<2){\r\n  return null\r\n}else{\r\n  return (\r\n    <div className={css({ margin: \"20px 0\" })}>\r\n      <ul\r\n        className={css({\r\n          backgroundColor: theme.colors.white,\r\n          display: \"flex\",\r\n          borderRadius: \"0px\",\r\n          listStyleType: \"none\",\r\n          padding: \"20px 16px\",\r\n          alignContent: \"center\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          boxShadow: \"0 0 8px rgba(0, 0 ,0, 0.1)\",\r\n        })}\r\n      >\r\n        {makePaginationLinks(\r\n          totalPages,\r\n          activePage,\r\n          relativeLink,\r\n          arrowClassName,\r\n          linkClassName,\r\n          activeLinkClassName,\r\n          subContainerClassName,\r\n          onPageChange\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n};\r\n","E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\ArrowNext.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\assets\\icons\\ArrowPrev.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\utils\\use-previous.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\containers\\ContactForm\\ContactForm.style.tsx",[],"E:\\test-task\\contacts\\contact-book-front\\src\\components\\DotsLoader.tsx",["164"],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"165","replacedBy":"169"},{"ruleId":"167","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":20,"column":10,"nodeType":"173","messageId":"174","endLine":20,"endColumn":13},{"ruleId":"171","severity":1,"message":"175","line":5,"column":28,"nodeType":"173","messageId":"174","endLine":5,"endColumn":41},{"ruleId":"171","severity":1,"message":"176","line":66,"column":15,"nodeType":"173","messageId":"174","endLine":66,"endColumn":20},{"ruleId":"171","severity":1,"message":"177","line":4,"column":5,"nodeType":"173","messageId":"174","endLine":4,"endColumn":16},{"ruleId":"171","severity":1,"message":"178","line":6,"column":5,"nodeType":"173","messageId":"174","endLine":6,"endColumn":16},{"ruleId":"171","severity":1,"message":"179","line":7,"column":5,"nodeType":"173","messageId":"174","endLine":7,"endColumn":16},{"ruleId":"171","severity":1,"message":"180","line":9,"column":8,"nodeType":"173","messageId":"174","endLine":9,"endColumn":14},{"ruleId":"171","severity":1,"message":"181","line":10,"column":10,"nodeType":"173","messageId":"174","endLine":10,"endColumn":19},{"ruleId":"171","severity":1,"message":"182","line":22,"column":9,"nodeType":"173","messageId":"174","endLine":22,"endColumn":20},{"ruleId":"171","severity":1,"message":"172","line":23,"column":12,"nodeType":"173","messageId":"174","endLine":23,"endColumn":15},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],["183"],["184"],"@typescript-eslint/no-unused-vars","'css' is assigned a value but never used.","Identifier","unusedVar","'useModalState' is defined but never used.","'theme' is assigned a value but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'ModalButton' is defined but never used.","'Button' is defined but never used.","'CloseIcon' is defined but never used.","'handleClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]